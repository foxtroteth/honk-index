{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "purple",
    "glyph" : "magic"
  },
  "name" : "Honk Index",
  "script" : "\/\/ API URL\nconst apiUrl = \"http:\/\/honk.etherobot.xyz\/metrics\";\n\n\/\/ Profile Image URL\nconst imageUrl = \"https:\/\/i.imgur.com\/vfYZZms.jpeg\";\n\n\/**\n * Converts a string with \"K\", \"M\", or \"B\" suffixes into a numeric value.\n * @param {string} str - The string to parse.\n * @returns {number} - The numeric value.\n *\/\nfunction parseAbbreviatedNumber(str) {\n  const value = parseFloat(str);\n  if (str.includes(\"B\")) return value * 1_000_000_000; \/\/ Billions\n  if (str.includes(\"M\")) return value * 1_000_000; \/\/ Millions\n  if (str.includes(\"K\")) return value * 1_000; \/\/ Thousands\n  return value; \/\/ No abbreviation\n}\n\n\/\/ Detect light\/dark mode and set colors accordingly\nconst isDarkMode = Device.isUsingDarkAppearance();\nconst backgroundColor = isDarkMode ? new Color(\"#1c1c1e\") : new Color(\"#f4f4f8\"); \/\/ Dark: Blackish | Light: Soft white\nconst textColor = isDarkMode ? new Color(\"#f4f4f8\") : new Color(\"#333333\"); \/\/ Dark: Light text | Light: Dark text\nconst secondaryTextColor = isDarkMode ? new Color(\"#aaaaaa\") : new Color(\"#555555\"); \/\/ Dark: Gray | Light: Medium gray\n\ntry {\n  \/\/ Fetch data from the API\n  let response = await new Request(apiUrl).loadJSON();\n\n  \/\/ Validate the response\n  if (!Array.isArray(response)) {\n    throw new Error(\"API response is not an array.\");\n  }\n\n  \/\/ Create the widget\n  let widget = new ListWidget();\n  widget.backgroundColor = backgroundColor;\n\n  \/\/ Add padding at the top\n  widget.addSpacer(16);\n\n  \/\/ Add profile image and title\n  let headerStack = widget.addStack();\n  headerStack.centerAlignContent();\n\n  try {\n    \/\/ Attempt to load the profile image\n    let imgRequest = new Request(imageUrl);\n    let img = await imgRequest.loadImage();\n    let profileImg = headerStack.addImage(img);\n    profileImg.imageSize = new Size(30, 30); \/\/ Smaller image size\n    profileImg.cornerRadius = 15;\n\n    headerStack.addSpacer(6); \/\/ Add spacing if the image is successfully loaded\n  } catch (imageError) {\n    \/\/ Log an error if the image cannot be loaded\n    console.warn(\"Image could not be loaded. Skipping image.\");\n  }\n\n  \/\/ Add the title with \"Honk\" and \"Metrics\" in different colors\n  let honkText = headerStack.addText(\"Honk \");\n  honkText.font = Font.boldSystemFont(14); \/\/ Smaller font size\n  honkText.textColor = new Color(\"#29b0d2\"); \/\/ Blueish color for \"Honk\"\n\n  let metricsText = headerStack.addText(\"Index\");\n  metricsText.font = Font.boldSystemFont(14); \/\/ Smaller font size\n  metricsText.textColor = new Color(\"#6d63bd\"); \/\/ Purpleish color for \"Index\"\n\n  widget.addSpacer(8); \/\/ Adjust spacing below the header\n\n  \/\/ Loop through metrics and display them\n  response.forEach((metric) => {\n    let metricStack = widget.addStack();\n    metricStack.centerAlignContent();\n\n    \/\/ Metric name in bold\n    let metricName = metricStack.addText(`${metric.name}: `);\n    metricName.font = Font.boldSystemFont(12); \/\/ Smaller font size\n    metricName.textColor = textColor;\n\n    \/\/ Metric value in soft color\n    let metricValue = metricStack.addText(metric.value.toString());\n    metricValue.font = Font.mediumSystemFont(12); \/\/ Smaller font size\n    metricValue.textColor = secondaryTextColor;\n\n    \/\/ Determine the color of the metric difference\n    let diffColor;\n    if (metric.name === \"Imb\") {\n      \/\/ Reverse logic for Imb: Red for positive, Green for negative\n      diffColor = metric.diff.includes(\"+\") ? new Color(\"#FF0000\") : new Color(\"#228B22\"); \/\/ Dark green\n    } else {\n      \/\/ Default logic: Green for positive, Red for negative\n      diffColor = metric.diff.includes(\"+\") ? new Color(\"#228B22\") : new Color(\"#FF0000\"); \/\/ Dark green\n    }\n\n    \/\/ Metric diff in smaller, styled text\n    let metricDiff = metricStack.addText(` ${metric.diff}`);\n    metricDiff.font = Font.italicSystemFont(10); \/\/ Smaller font size\n    metricDiff.textColor = diffColor;\n\n    widget.addSpacer(4); \/\/ Reduce spacing between metrics\n  });\n\n  \/\/ Add a footer with subtle separator\n  widget.addSpacer();\n  let separator = widget.addText(\"\");\n  separator.font = Font.mediumSystemFont(10); \/\/ Smaller font size\n  separator.textColor = secondaryTextColor;\n  separator.centerAlignText();\n\n  \/\/ Display the widget\n  if (config.runsInWidget) {\n    Script.setWidget(widget);\n  } else {\n    widget.presentMedium(); \/\/ Medium-sized widget for testing\n  }\n} catch (error) {\n  \/\/ Handle errors gracefully\n  let widget = new ListWidget();\n  widget.backgroundColor = new Color(\"#fff0f0\"); \/\/ Light red background for error\n  let errorText = widget.addText(\"Error Loading Metrics\");\n  errorText.font = Font.boldSystemFont(14); \/\/ Smaller font size\n  errorText.textColor = Color.red();\n  errorText.centerAlignText();\n  widget.addSpacer();\n  let errorDetails = widget.addText(error.message);\n  errorDetails.font = Font.mediumSystemFont(10); \/\/ Smaller font size\n  errorDetails.textColor = new Color(\"#555555\");\n  errorDetails.centerAlignText();\n  Script.setWidget(widget);\n}\nScript.complete();",
  "share_sheet_inputs" : [

  ]
}